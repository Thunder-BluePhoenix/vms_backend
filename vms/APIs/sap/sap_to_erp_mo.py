import frappe
import json
from datetime import datetime
from frappe import _

@frappe.whitelist(allow_guest=True)
def get_material_code_from_sap():
    """
    API endpoint to receive material code from SAP and update ERP records
    """
    print("--------------------API GOT HIT IN SAP---------------")
    
    try:
        # Get JSON data from request
        data = frappe.request.get_json()
        
        if not data:
            return create_response("fail", "No JSON body received")

        # Extract fields from SAP response
        reqno = data.get("Reqno")
        matnr = data.get("Matnr")
        maktx = data.get("Maktx")
        zmsg = data.get("Zmsg")
        ztext = data.get("Ztext")

        # Validate required fields
        if not reqno:
            return create_response("fail", "Reqno (Request ID) is required")
        
        if not matnr:
            return create_response("fail", "Matnr (Material Code) is required")

        # Find Requestor Master document by request_id
        requestor_docs = frappe.get_all(
            "Requestor Master",
            filters={"request_id": reqno},
            fields=["name", "material_master_ref_no", "material_onboarding_ref_no"]
        )
        
        if not requestor_docs:
            return create_response("fail", f"No Requestor Master found for request_id: {reqno}")
        
        requestor_name = requestor_docs[0].name
        requestor_doc = frappe.get_doc("Requestor Master", requestor_name)
        
        # Validate material_master_ref_no exists
        if not requestor_doc.material_master_ref_no:
            return create_response("fail", f"No Material Master reference found in Requestor: {requestor_name}")

        # Update Material Master with material code
        try:
            material_doc = frappe.get_doc("Material Master", requestor_doc.material_master_ref_no)
            material_doc.material_code = matnr
            material_doc.save(ignore_permissions=True)
        except Exception as e:
            frappe.log_error(
                f"Error updating Material Master {requestor_doc.material_master_ref_no}: {str(e)}",
                "SAP Material Master Update Error"
            )
            return create_response("error", f"Failed to update Material Master: {str(e)}")

        # Format SAP response data beautifully for code fields
        formatted_zmsg = format_json_for_code_field(zmsg) if zmsg else ""
        formatted_ztext = format_json_for_code_field(ztext) if ztext else ""
        formatted_maktx = format_json_for_code_field(maktx) if maktx else ""
        
        # Create beautiful SAP Summary
        sap_summary = create_sap_summary(data, reqno, matnr, maktx, zmsg, ztext)
        
        # Update Requestor Master fields
        requestor_doc.zmsg = formatted_zmsg
        requestor_doc.ztext = formatted_ztext
        requestor_doc.maktx = formatted_maktx
        requestor_doc.sap_summary = sap_summary
        requestor_doc.approval_status = "Code Generated by SAP"
        requestor_doc.save(ignore_permissions=True)

        # Create MO SAP Log entry with proper formatting
        log_doc = create_sap_log(
            requestor_ref=requestor_doc.name,
            material_onboarding_link=requestor_doc.material_onboarding_ref_no,
            full_request_data=data,
            direction="SAP to ERP",
            status="Success"
        )

        # Commit transaction
        frappe.db.commit()
        
        # Send notification email
        try:
            send_email_from_sap(requestor_doc, matnr, maktx, zmsg, ztext)
        except Exception as e:
            frappe.log_error(f"Email notification failed: {str(e)}", "SAP Email Error")

        return create_response(
            "success",
            "Material code updated successfully",
            {
                "requestor_master": requestor_doc.name,
                "material_master": requestor_doc.material_master_ref_no,
                "material_code": matnr,
                "approval_status": "Code Generated by SAP",
                "log_id": log_doc.name
            }
        )

    except frappe.DoesNotExistError as e:
        frappe.log_error(frappe.get_traceback(), "SAP Material Code - Document Not Found")
        return create_response("error", f"Document not found: {str(e)}")
    
    except frappe.ValidationError as e:
        frappe.log_error(frappe.get_traceback(), "SAP Material Code - Validation Error")
        return create_response("error", f"Validation error: {str(e)}")
    
    except Exception as e:
        frappe.log_error(frappe.get_traceback(), "SAP Material Code Update Error")
        return create_response("error", f"Unexpected error: {str(e)}")


def format_json_for_code_field(data):
    """
    Format data beautifully for code field display
    """
    if not data:
        return ""
    
    try:
        # If data is already a dict or list, format it
        if isinstance(data, (dict, list)):
            return json.dumps(data, indent=2, ensure_ascii=False)
        
        # If data is a string, try to parse and format
        try:
            parsed = json.loads(data)
            return json.dumps(parsed, indent=2, ensure_ascii=False)
        except:
            # If not JSON, return as is with nice formatting
            return str(data)
    except:
        return str(data)


def create_sap_summary(full_data, reqno, matnr, maktx, zmsg, ztext):
    """
    Create a beautifully formatted SAP Summary similar to vendor example
    """
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")
    
    # Extract nested response if available
    response_details = full_data.get("response_details", {})
    response_body = response_details.get("response_body", {})
    
    summary = {
        "transaction_summary": {
            "status": response_details.get("status", "Success"),
            "material_code": matnr,
            "material_description": maktx or "",
            "request_id": reqno,
            "sap_message": zmsg or "",
            "sap_text": ztext or "",
            "timestamp": timestamp,
            "integration_method": "API-Based"
        },
        "request_details": {
            "request_id": reqno,
            "material_code_received": matnr,
            "payload_received": full_data
        },
        "response_details": {
            "status": "Success",
            "material_code": matnr,
            "material_description": maktx or "",
            "sap_message": zmsg or "",
            "response_body": response_body if response_body else full_data
        }
    }
    
    return json.dumps(summary, indent=2, ensure_ascii=False)


def create_sap_log(requestor_ref, material_onboarding_link, full_request_data, direction, status):
    """
    Create MO SAP Logs entry with proper field mapping
    """
    try:
        log = frappe.new_doc("MO SAP Logs")
        log.requestor_ref = requestor_ref
        log.material_onboarding_link = material_onboarding_link or ""
        log.direction = direction
        log.status = status
        
        # Format the transaction data beautifully
        if direction == "SAP to ERP":
            # SAP to ERP: SAP sent data to ERP
            log.sap_to_erp_data = json.dumps(full_request_data, indent=2, ensure_ascii=False)
            log.sap_response = json.dumps({
                "status": "Success",
                "message": "Data received from SAP",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }, indent=2, ensure_ascii=False)
            log.erp_to_sap_data = ""
            log.erp_response = json.dumps({
                "status": "Success",
                "message": "Material code updated in ERP successfully",
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            }, indent=2, ensure_ascii=False)
        else:
            # ERP to SAP: ERP sending data to SAP
            log.erp_to_sap_data = json.dumps(full_request_data, indent=2, ensure_ascii=False)
            log.sap_response = ""
            log.sap_to_erp_data = ""
            log.erp_response = ""
        
        # Create beautiful total transaction summary
        transaction_summary = create_transaction_summary(full_request_data, direction, status)
        log.total_transaction = json.dumps(transaction_summary, indent=2, ensure_ascii=False)
        
        log.insert(ignore_permissions=True)
        
        return log
    
    except Exception as e:
        frappe.log_error(f"Failed to create SAP log: {str(e)}", "SAP Log Creation Error")
        raise


def create_transaction_summary(data, direction, status):
    """
    Create transaction summary in the format shown in vendor example
    """
    summary = {
        "transaction_details": {
            "direction": direction,
            "status": status,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f"),
            "integration_method": "API-Based"
        },
        "request_summary": {
            "total_records": 1,
            "processed_records": 1 if status == "Success" else 0,
            "failed_records": 0 if status == "Success" else 1
        },
        "data_summary": {
            "request_id": data.get("Reqno", ""),
            "material_code": data.get("Matnr", ""),
            "material_description": data.get("Maktx", ""),
            "sap_message": data.get("Zmsg", ""),
            "sap_text": data.get("Ztext", "")
        }
    }
    
    if status != "Success":
        summary["error_details"] = data.get("error", "Unknown error")
    else:
        summary["error_details"] = ""
    
    return summary


def create_response(status, message, data=None):
    """
    Standardized response format
    """
    response = {
        "status": status,
        "message": message,
        "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    }
    
    if data:
        response["data"] = data
    
    return response






@frappe.whitelist()
def send_email_from_sap(requestor_doc, matnr, maktx, zmsg, ztext):
    try:
        # print("Email Function Hit")

        to_email = requestor_doc.contact_information_email
        if not to_email:
            frappe.log_error("No recipient email found", f"Requestor: {requestor_doc.name}")
            return {"status": "fail", "message": _("No recipient email found")}

        cc_emails = []
        
        reporting_to_id = requestor_doc.immediate_reporting_head
        user_name = frappe.get_value("Employee Master", filters={"name": requestor_doc.requested_by}, fieldname=["full_name"])
        
        if reporting_to_id:
            employee_doc = frappe.get_doc("Employee Master", reporting_to_id)
            if employee_doc.email:
                cc_emails.append(employee_doc.email)
        
       

        subject = f"Material Code Created for Request ID {requestor_doc.request_id}"
        
        message = f"""
            <p>Dear {user_name or 'User'},</p>
            <p>Greetings for the Day!</p>
            <p>SAP has successfully created a material for your request.</p>
            <p><strong>Details:</strong></p>
            <ul>
                <li><b>Request ID:</b> {requestor_doc.request_id}</li>
                <li><b>Material Code:</b> {matnr}</li>
                <li><b>Description:</b> {maktx}</li>
                <li><b>Message:</b> {zmsg}</li>
                <li><b>Details:</b> {ztext}</li>
            </ul>
            <p>Thanking you,<br/>SAP Integration Team</p>
        """

        frappe.custom_sendmail(
            recipients=[to_email],
            cc=cc_emails,
            subject=subject,
            message=message,
            now=True
        )

        # print("Email sent successfully.")
        return {"status": "success", "message": _("Email sent successfully")}

    except Exception as e:
        frappe.log_error(frappe.get_traceback(), "SAP Email Sending Error")
        return {"status": "fail", "message": _("Failed to send email.")}
    

